#!/bin/bash

set -o errtrace
set -o pipefail

# The lock file is stored inside the Wazuh installation directory so that a
# secure password gets set each time Wazuh is reinstalled.
lock_file=/var/ossec/api/configuration/security/ansible-hids-role.lock
api_url=https://localhost:55000
# We append a _ since special characters are required in API passwords.
password=$(head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c 29)_ || exit
password_file=~/wazuh-api-password

# Once we have changed the password, this script should become a no-op.
if [[ -e $lock_file ]]; then
	exit 64
fi

systemctl start wazuh-manager || exit

# Wait for API to be reachable.
until curl --insecure "$api_url" &>/dev/null; do
	sleep 1
done

token=$(
	curl --silent \
		--show-error \
		--insecure \
		--user wazuh:wazuh \
		"$api_url/security/user/authenticate?raw=true"
)
if [[ $? -eq 0 ]]; then
	if echo "$token" | grep --quiet '"title": "'; then
		echo "$token" >&2
		exit 1
	fi
else
	exit 1
fi

# Update password for "wazuh" last since forced logout occurs.
for user in 2 1; do
	result=$(
		curl --silent \
			--show-error \
			--insecure \
			--request PUT \
			--header @<(printf "%s\n" "Content-Type: application/json" "Authorization: Bearer $token") \
			--data-binary @<(echo '{"password":"'"$password"'"}') \
			"$api_url/security/users/$user"
	)
	if [[ $? -eq 0 ]]; then
		if ! echo "$result" | grep --quiet '"error": 0'; then
			echo "$result" >&2
			exit 1
		fi
	else
		exit 1
	fi
done

echo "$password" >"$password_file" || exit
chmod 400 "$password_file" || exit

: >"$lock_file"
